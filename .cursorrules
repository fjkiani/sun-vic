# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## LLM Integration Lessons
- Gemini Pro doesn't support `withStructuredOutput` like Claude/Anthropic - need different approach for structured output
- Keep existing Claude implementation while testing Gemini integration to ensure smooth transition
- Need to modify prompts to work with Gemini's response format
- Consider creating wrapper/adapter for consistent API across different LLM providers

## Current Task: Gemini Integration

### Progress
[X] Initial setup
  - Added @google/generative-ai package
  - Created LLM config file

[✓] Attempted changes:
  - verify-general.ts: Updated to use new response format ✓
  - verify-github.ts: Needs update for LLMResponse
  - verify-youtube.ts: Needs update for LLMResponse
  - validate-bulk-tweets.ts: Updated to use new response format ✓

[!] Files to Update (HIGH PRIORITY):
  1. Response Format Updates Needed:
     - src/agents/shared/nodes/verify-github.ts
       - Change { relevant } = await to response.parsed?.relevant
     - src/agents/shared/nodes/verify-youtube.ts
       - Change { relevant } = await to response.parsed?.relevant
     - src/agents/supervisor/nodes/determine-post-type.ts
       - Fix type mismatch in reportAndPostType.push()
     - src/agents/shared/nodes/update-scheduled-date.ts
       - Change result.scheduleDate to result.parsed?.scheduleDate
     - src/agents/generate-thread/nodes/rewrite-thread.ts
       - Change revisedThreadResponse.threadPosts to revisedThreadResponse.parsed?.threadPosts
     - src/agents/verify-reddit-post/nodes/validate-reddit-post.ts
       - Change result.relevant to result.parsed?.relevant
     - src/agents/verify-tweet/nodes/validate-tweet.ts
       - Change { relevant } = await to response.parsed?.relevant
     - src/agents/generate-thread/nodes/generate-thread-posts.ts
       - Fix message format from [["user", msg]] to [{role: "user", content: msg}]

  2. Type Updates Needed:
     - src/config/llm-adapter.ts
       - Fix ChatAnthropic type issues in withStructuredOutput and withConfig
     - src/config/llm-adapter.test.ts
       - Update test assertions to use response.parsed

### Next Steps
[X] Create LLM adapter/wrapper for consistent API
[!] Fix Response Format Issues:
  1. [✓] Create proper LLMResponse interface
  2. [✓] Update verify-general.ts as example
  3. [✓] Update validate-bulk-tweets.ts as example
  4. [ ] Update remaining files following the pattern
  5. [ ] Add null coalescing for safety

[ ] Testing:
  1. [ ] Add unit tests for adapter
  2. [ ] Test response parsing
  3. [ ] Test error handling
  4. [ ] Integration tests with both providers

### Technical Notes
1. Response Format Pattern:
   - Always use response.parsed for structured data
   - Add null coalescing (e.g., response.parsed?.relevant ?? false)
   - Keep raw response in response.content

2. Message Format:
   - Old: [["user", message]]
   - New: [{ role: "user", content: message }]

3. Type Safety:
   - Use LLMResponse<T> for all responses
   - Add proper error handling for missing parsed data
   - Use type guards where needed

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Current Task
Implementing DeepSeek with Hyperbolic Fallback Integration

## Analysis
1. Current Setup:
   - Primary DeepSeek API integration needed in tools/llm_api.py
   - Fallback Hyperbolic API as backup
   - Python-based implementation required
   - Environment variables need configuration

2. Required Changes:
   - Add DeepSeek provider to tools/llm_api.py
   - Implement fallback logic in Python
   - Add error handling and monitoring
   - Update provider selection logic

## Implementation Plan

### Phase 1: Environment & Configuration [X]
- [X] Review current tools/llm_api.py implementation
- [X] Identify integration points for DeepSeek
- [X] Plan environment variables needed

### Phase 2: Provider Implementation [ ]
1. [ ] Add DeepSeek Provider
   - [ ] Create tools/providers/deepseek.py
   - [ ] Implement API client
   - [ ] Add configuration handling

2. [ ] Add Fallback Logic
   - [ ] Implement Hyperbolic fallback
   - [ ] Add error handling
   - [ ] Configure retry logic

### Phase 3: Integration [ ]
1. [ ] Update tools/llm_api.py
   - [ ] Add provider selection
   - [ ] Integrate fallback mechanism
   - [ ] Add monitoring

### Phase 4: Testing [ ]
1. [ ] Unit Tests
   - [ ] Test DeepSeek integration
   - [ ] Test fallback scenarios
   - [ ] Verify error handling

2. [ ] Integration Tests
   - [ ] End-to-end testing
   - [ ] Performance monitoring
   - [ ] Error recovery

## Progress
[X] Initial Analysis
  - Reviewed existing implementation
  - Identified integration points
  - Planned implementation approach

[ ] Provider Implementation
  - Starting with DeepSeek provider
  - Will add fallback logic next
  - Need to implement monitoring

## Technical Notes
- Implementation must be in Python
- Need to follow existing provider pattern in tools/llm_api.py
- Consider adding metrics for monitoring
- Implement proper error handling

## Next Steps
1. Create DeepSeek provider implementation
2. Add fallback mechanism
3. Update main LLM interface
4. Add comprehensive testing

Would you like me to proceed with implementing the DeepSeek provider in Python?